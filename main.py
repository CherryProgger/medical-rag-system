"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –û–û–ü –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import argparse
import sys
import logging
from pathlib import Path
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "src"))

from medical_rag.core.rag_system import MedicalRAGSystem
from medical_rag.models.config import Config
from medical_rag.data.data_processor import DataProcessor


def setup_logging(level: str = "INFO"):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    logging.basicConfig(
        level=getattr(logging, level),
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler("logs/rag_system.log")
        ]
    )


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = {
        "torch": "torch",
        "transformers": "transformers", 
        "sentence_transformers": "sentence_transformers",
        "faiss": "faiss",
        "numpy": "numpy",
        "pandas": "pandas",
        "scikit_learn": "sklearn",
        "streamlit": "streamlit"
    }
    
    missing_packages = []
    for package_name, import_name in required_packages.items():
        try:
            __import__(import_name)
        except ImportError:
            missing_packages.append(package_name)
    
    if missing_packages:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {missing_packages}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True


def check_data_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    required_files = [
        "rag_clean_dataset_v2_filtered.json"
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö: python data_preprocessing.py")
        return False
    
    print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω—ã")
    return True


def load_config(config_path: str = None) -> Config:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    if config_path and Path(config_path).exists():
        return Config.load(config_path)
    elif Path("config/default.json").exists():
        return Config.load("config/default.json")
    else:
        return Config()


def run_web_interface(config: Config):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    print("–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    import subprocess
    subprocess.run(["streamlit", "run", "src/medical_rag/interfaces/web_interface.py", "--server.port", "8501"])


def run_cli_demo(config: Config):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ"""
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã...")
    rag = MedicalRAGSystem(config)
    rag.initialize()
    
    print("\n" + "="*60)
    print("üè• –ú–ï–î–ò–¶–ò–ù–°–ö–ê–Ø RAG –°–ò–°–¢–ï–ú–ê - –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("="*60)
    print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–í–≤–µ–¥–∏—Ç–µ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("-" * 60)
    
    while True:
        try:
            question = input("\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            
            if question.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                break
            
            if not question:
                continue
            
            print("üîç –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞...")
            response = rag.answer_question(question)
            
            print(f"\nüìã –û—Ç–≤–µ—Ç:")
            print(f"{response.answer}")
            
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"  ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.metadata.processing_time:.2f}—Å")
            print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {response.metadata.num_documents_found}")
            print(f"  ‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {response.metadata.best_similarity_score:.3f}")
            print(f"  ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.metadata.confidence_level}")
            
            if response.relevant_documents:
                print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
                for i, doc in enumerate(response.relevant_documents[:2], 1):
                    print(f"  {i}. {doc.question[:50]}... (score: {doc.similarity_score:.3f})")
            
            if response.warnings:
                print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
                for warning in response.warnings:
                    print(f"  ‚Ä¢ {warning}")
            
        except KeyboardInterrupt:
            print("\n\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def run_evaluation(config: Config):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ü–µ–Ω–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏...")
    rag = MedicalRAGSystem(config)
    rag.initialize()
    
    print("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ü–µ–Ω—â–∏–∫–∞...")
    from medical_rag.services.evaluation_service import EvaluationService
    evaluator = EvaluationService(rag)
    
    print("–ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏...")
    results = evaluator.run_full_evaluation()
    
    print("\n" + "="*50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–¶–ï–ù–ö–ò")
    print("="*50)
    
    print(f"–û–±—â–∏–π –±–∞–ª–ª: {results['overall_score']:.3f}/1.0")
    print(f"–¢–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {results['test_size']}")
    
    print(f"\nüîç –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞:")
    print(f"  Precision: {results['retrieval_quality']['precision']:.3f}")
    print(f"  Recall: {results['retrieval_quality']['recall']:.3f}")
    print(f"  F1-Score: {results['retrieval_quality']['f1_score']:.3f}")
    
    print(f"\nüí¨ –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤:")
    print(f"  –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: {results['answer_quality']['semantic_similarity']:.3f}")
    print(f"  –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {results['answer_quality']['keyword_overlap']:.3f}")
    print(f"  –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {results['answer_quality']['avg_answer_length']:.1f} —Å–ª–æ–≤")
    
    print(f"\n‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞:")
    print(f"  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {results['response_time']['avg_response_time']:.2f}—Å")
    print(f"  –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {results['response_time']['median_response_time']:.2f}—Å")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    for i, rec in enumerate(results['recommendations'], 1):
        print(f"  {i}. {rec}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    evaluator.save_evaluation_report(results, "evaluation_report.json")
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: evaluation_report.json")


def run_data_preprocessing():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    print("–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    
    config = load_config()
    processor = DataProcessor(config)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    processor.load_raw_dataset("data/rag_clean_dataset_v2.json")
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    processed_data = processor.create_processed_dataset()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç
    output_path = processor.save_processed_dataset()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = processor.get_statistics()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ä: {stats['total_pairs']}")
    print(f"  ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–æ: {stats['excluded_count']}")
    print(f"  ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {stats['categories']}")
    print(f"  ‚Ä¢ –¢–µ–º—ã: {stats['topics']}")
    print(f"  ‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {stats['difficulties']}")
    
    print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path}")


def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã"""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    import subprocess
    result = subprocess.run(["python", "-m", "pytest", "tests/", "-v"], capture_output=True, text=True)
    
    print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:")
    print(result.stdout)
    if result.stderr:
        print("–û—à–∏–±–∫–∏:")
        print(result.stderr)
    
    return result.returncode == 0


def show_system_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    print("üè• –ú–ï–î–ò–¶–ò–ù–°–ö–ê–Ø RAG –°–ò–°–¢–ï–ú–ê - –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("="*60)
    print("–í–µ—Ä—Å–∏—è: 2.0.0")
    print("–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –û–û–ü, –º–æ–¥—É–ª—å–Ω–∞—è")
    print("–î–∞–Ω–Ω—ã–µ: –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ —Å–æ—Å—É–¥–∏—Å—Ç—ã–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º")
    print("–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: RAG, Sentence Transformers, FAISS, PyTorch")
    print()
    print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    print("  ‚Ä¢ src/medical_rag/ - –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏")
    print("  ‚Ä¢ tests/ - –¢–µ—Å—Ç—ã (unit, integration, e2e)")
    print("  ‚Ä¢ config/ - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    print("  ‚Ä¢ docs/ - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è")
    print("  ‚Ä¢ examples/ - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print()
    print("üöÄ –†–µ–∂–∏–º—ã –∑–∞–ø—É—Å–∫–∞:")
    print("  ‚Ä¢ python main.py --web - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("  ‚Ä¢ python main.py --cli - –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞")
    print("  ‚Ä¢ python main.py --eval - –û—Ü–µ–Ω–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("  ‚Ä¢ python main.py --preprocess - –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("  ‚Ä¢ python main.py --test - –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
    print("  ‚Ä¢ python main.py --info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    parser.add_argument("--web", action="store_true", help="–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    parser.add_argument("--cli", action="store_true", help="–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")
    parser.add_argument("--eval", action="store_true", help="–ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
    parser.add_argument("--preprocess", action="store_true", help="–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--test", action="store_true", help="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤")
    parser.add_argument("--info", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ")
    parser.add_argument("--check", action="store_true", help="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ —Ñ–∞–π–ª—ã")
    parser.add_argument("--config", type=str, help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    parser.add_argument("--log-level", type=str, default="INFO", choices=["DEBUG", "INFO", "WARNING", "ERROR"], help="–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging(args.log_level)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Ñ–∞–π–ª–æ–≤
    if args.check or not any([args.web, args.cli, args.eval, args.preprocess, args.test, args.info]):
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        
        deps_ok = check_dependencies()
        data_ok = check_data_files()
        
        if deps_ok and data_ok:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        else:
            print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏–ª–∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            sys.exit(1)
        
        if not any([args.web, args.cli, args.eval, args.preprocess, args.test, args.info]):
            show_system_info()
            return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = load_config(args.config)
    
    # –ó–∞–ø—É—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∂–∏–º–æ–≤
    if args.info:
        show_system_info()
    elif args.preprocess:
        run_data_preprocessing()
    elif args.test:
        success = run_tests()
        sys.exit(0 if success else 1)
    elif args.web:
        run_web_interface(config)
    elif args.cli:
        run_cli_demo(config)
    elif args.eval:
        run_evaluation(config)
    else:
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π")


if __name__ == "__main__":
    main()
