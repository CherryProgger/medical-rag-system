#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import subprocess
from pathlib import Path


def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"üîÑ {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå {description} - –æ—à–∏–±–∫–∞:")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå {description} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False


def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    directories = [
        "data",
        "logs", 
        "cache",
        "models",
        "docs",
        "examples",
        "src/medical_rag/core",
        "src/medical_rag/models",
        "src/medical_rag/data",
        "src/medical_rag/services",
        "src/medical_rag/interfaces",
        "src/medical_rag/utils",
        "tests/unit",
        "tests/integration", 
        "tests/e2e",
        "config"
    ]
    
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"  ‚úÖ {directory}")
    
    print("‚úÖ –í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")


def install_dependencies():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not run_command("pip install -r requirements.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"):
        return False
    
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if not run_command("pip install -r requirements-dev.txt", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"):
        return False
    
    return True


def setup_pre_commit():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç pre-commit —Ö—É–∫–∏"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pre-commit...")
    
    # –°–æ–∑–¥–∞–µ–º .pre-commit-config.yaml
    pre_commit_config = """
repos:
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3.9
  
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
  
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
  
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.3.0
    hooks:
      - id: mypy
        additional_dependencies: [types-all]
"""
    
    with open(".pre-commit-config.yaml", "w") as f:
        f.write(pre_commit_config)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pre-commit
    if run_command("pre-commit install", "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ pre-commit —Ö—É–∫–æ–≤"):
        print("‚úÖ Pre-commit –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True
    return False


def create_gitignore():
    """–°–æ–∑–¥–∞–µ—Ç .gitignore —Ñ–∞–π–ª"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ .gitignore...")
    
    gitignore_content = """
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# Jupyter Notebook
.ipynb_checkpoints

# pytest
.pytest_cache/
.coverage
htmlcov/

# Logs
logs/
*.log

# Data
data/raw/
data/processed/
*.json
*.csv
*.xlsx

# Models
models/
*.pkl
*.joblib
*.h5
*.pt
*.pth

# Cache
cache/
.cache/

# OS
.DS_Store
Thumbs.db

# Medical RAG specific
vector_index.faiss
embeddings_cache/
evaluation_reports/
"""
    
    with open(".gitignore", "w") as f:
        f.write(gitignore_content)
    
    print("‚úÖ .gitignore —Å–æ–∑–¥–∞–Ω")


def create_pytest_config():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é pytest"""
    print("üß™ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pytest...")
    
    pytest_ini = """
[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
addopts = 
    -v
    --tb=short
    --strict-markers
    --disable-warnings
    --cov=src/medical_rag
    --cov-report=term-missing
    --cov-report=html:htmlcov
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    slow: Slow tests
"""
    
    with open("pytest.ini", "w") as f:
        f.write(pytest_ini)
    
    print("‚úÖ pytest –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


def create_mypy_config():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é mypy"""
    print("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mypy...")
    
    mypy_ini = """
[mypy]
python_version = 3.9
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = True
disallow_incomplete_defs = True
check_untyped_defs = True
disallow_untyped_decorators = True
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_equality = True

[mypy-tests.*]
disallow_untyped_defs = False
"""
    
    with open("mypy.ini", "w") as f:
        f.write(mypy_ini)
    
    print("‚úÖ mypy –Ω–∞—Å—Ç—Ä–æ–µ–Ω")


def run_initial_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    print("üß™ –ó–∞–ø—É—Å–∫ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
    
    if run_command("python -m pytest tests/unit/ -v", "Unit —Ç–µ—Å—Ç—ã"):
        print("‚úÖ Unit —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print("‚ö†Ô∏è Unit —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π RAG —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    if sys.version_info < (3, 9):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.9 –∏–ª–∏ –≤—ã—à–µ")
        sys.exit(1)
    
    print(f"‚úÖ Python {sys.version}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories()
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    create_gitignore()
    create_pytest_config()
    create_mypy_config()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not install_dependencies():
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        sys.exit(1)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º pre-commit
    setup_pre_commit()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    run_initial_tests()
    
    print("\n" + "=" * 50)
    print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö: python main_new.py --preprocess")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: python main_new.py --test")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: python main_new.py --cli")
    print("4. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python main_new.py --web")
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README_NEW.md")
    print("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: config/")
    print("üß™ –¢–µ—Å—Ç—ã: tests/")


if __name__ == "__main__":
    main()
