"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π RAG —Å–∏—Å—Ç–µ–º—ã
"""

import streamlit as st
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
project_root = Path(__file__).parent.parent.parent.parent
sys.path.insert(0, str(project_root))
sys.path.insert(0, str(project_root / "src"))

from medical_rag.core.rag_system import MedicalRAGSystem
from medical_rag.models.config import Config


def create_web_app():
    """–°–æ–∑–¥–∞–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title="–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è RAG —Å–∏—Å—Ç–µ–º–∞",
        page_icon="üè•",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # CSS —Å—Ç–∏–ª–∏
    st.markdown("""
    <style>
        .main-header {
            font-size: 2.5rem;
            color: #1f77b4;
            text-align: center;
            margin-bottom: 2rem;
        }
        .question-box {
            background-color: #f0f2f6;
            padding: 1rem;
            border-radius: 10px;
            margin: 1rem 0;
        }
        .answer-box {
            background-color: #e8f4fd;
            padding: 1rem;
            border-radius: 10px;
            border-left: 4px solid #1f77b4;
            margin: 1rem 0;
            color: #2c3e50 !important;
        }
        .answer-box p {
            color: #2c3e50 !important;
            margin: 0.5rem 0;
            line-height: 1.6;
        }
        .source-box {
            background-color: #f8f9fa;
            padding: 0.5rem;
            border-radius: 5px;
            font-size: 0.9rem;
            color: #666;
        }
        .metric-box {
            background-color: #fff;
            padding: 0.5rem;
            border-radius: 5px;
            border: 1px solid #ddd;
            text-align: center;
        }
        /* –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è Streamlit */
        .stMarkdown {
            color: #2c3e50;
        }
        .stText {
            color: #2c3e50;
        }
        .stTextInput > div > div > input {
            color: #2c3e50;
        }
        .stTextArea > div > div > textarea {
            color: #2c3e50;
        }
        /* –£–ª—É—á—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å */
        .stApp {
            color: #2c3e50;
        }
        .stMarkdown p {
            color: #2c3e50 !important;
        }
        .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 {
            color: #1f77b4 !important;
        }
    </style>
    """, unsafe_allow_html=True)
    
    @st.cache_resource
    def load_rag_system():
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç RAG —Å–∏—Å—Ç–µ–º—É —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            config = Config.load("config/default.json")
            rag = MedicalRAGSystem(config)
            rag.initialize("data/rag_clean_dataset_v2_filtered.json")
            return rag
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã: {e}")
            return None
    
    def display_sidebar():
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        st.sidebar.title("üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è RAG —Å–∏—Å—Ç–µ–º–∞")
        
        st.sidebar.markdown("### –û —Å–∏—Å—Ç–µ–º–µ")
        st.sidebar.info("""
        –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é RAG (Retrieval-Augmented Generation) 
        –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
        
        **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
        - –ü–æ–∏—Å–∫ –ø–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
        - –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö
        - –°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        """)
        
        st.sidebar.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        if 'rag_system' in st.session_state and st.session_state.rag_system:
            rag = st.session_state.rag_system
            info = rag.get_system_info()
            if 'statistics' in info:
                st.sidebar.metric("–î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ", info['statistics'].get('total_documents', 0))
        
        st.sidebar.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        top_k = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞", 1, 10, 3)
        
        return top_k
    
    def display_main_interface(rag_system, top_k):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        st.markdown('<h1 class="main-header">üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è RAG —Å–∏—Å—Ç–µ–º–∞</h1>', unsafe_allow_html=True)
        
        st.markdown("""
        ### –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        
        –°–∏—Å—Ç–µ–º–∞ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ:
        - –í–∞—Ä–∏–∫–æ–∑–Ω–æ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –≤–µ–Ω
        - –¢—Ä–æ–º–±–æ—ç–º–±–æ–ª–∏—á–µ—Å–∫–∏—Ö –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è—Ö  
        - –§–ª–µ–±–∏—Ç–∞—Ö –∏ —Ç—Ä–æ–º–±–æ—Ñ–ª–µ–±–∏—Ç–∞—Ö
        - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∏ –ª–µ—á–µ–Ω–∏–∏ —Å–æ—Å—É–¥–∏—Å—Ç—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
        """)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
        question = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ß—Ç–æ —Ç–∞–∫–æ–µ –≤–∞—Ä–∏–∫–æ–∑–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–µ–Ω?",
            height=100
        )
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            search_button = st.button("üîç –ù–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç", type="primary", use_container_width=True)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        if search_button and question:
            with st.spinner("–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..."):
                response = rag_system.answer_question(question, max_results=top_k)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            st.markdown("### üìã –û—Ç–≤–µ—Ç")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            formatted_answer = response.answer.replace('\n', '<br>')
            st.markdown(f'<div class="answer-box"><p>{formatted_answer}</p></div>', unsafe_allow_html=True)
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞", f"{response.metadata.processing_time:.2f}—Å")
            with col2:
                st.metric("–ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", response.metadata.num_documents_found)
            with col3:
                st.metric("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å", f"{response.metadata.best_similarity_score:.3f}")
            with col4:
                confidence = "–í—ã—Å–æ–∫–∞—è" if response.metadata.confidence_level == "high" else "–°—Ä–µ–¥–Ω—è—è" if response.metadata.confidence_level == "medium" else "–ù–∏–∑–∫–∞—è"
                st.metric("–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", confidence)
            
            # –ò—Å—Ç–æ—á–Ω–∏–∫–∏
            if response.relevant_documents:
                st.markdown("### üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏")
                for i, doc in enumerate(response.relevant_documents, 1):
                    with st.expander(f"–ò—Å—Ç–æ—á–Ω–∏–∫ {i} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {doc.similarity_score:.3f})"):
                        st.markdown(f"**–í–æ–ø—Ä–æ—Å:** {doc.question}")
                        st.markdown(f"**–û—Ç–≤–µ—Ç:** {doc.answer}")
                        
                        if doc.metadata:
                            st.markdown(f"**–§–∞–π–ª:** {doc.metadata.source_file}")
                            if doc.metadata.section:
                                st.markdown(f"**–†–∞–∑–¥–µ–ª:** {doc.metadata.section}")
                            
                            st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {doc.metadata.category}")
                            st.markdown(f"**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {doc.metadata.difficulty}")
                            st.markdown(f"**–¢–µ–º–∞:** {doc.metadata.topic}")
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if response.warnings:
                st.markdown("### ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è")
                for warning in response.warnings:
                    st.warning(warning)
    
    def display_example_questions():
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤"""
        st.markdown("### üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        example_questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–∞—Ä–∏–∫–æ–∑–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–µ–Ω –Ω–∏–∂–Ω–∏—Ö –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–µ–π?",
            "–ö–∞–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç—Ä–æ–º–±–æ–∑–∞ –≥–ª—É–±–æ–∫–∏—Ö –≤–µ–Ω?",
            "–ö–∞–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –≤–µ–Ω?",
            "–ö–∞–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π –≤–µ–Ω?",
            "–ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞ —É —Ç—Ä–æ–º–±–æ—Ñ–ª–µ–±–∏—Ç–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã—Ö –≤–µ–Ω?",
            "–ö–∞–∫ –ª–µ—á–∏—Ç—å –≤–µ–Ω–æ–∑–Ω—ã–µ —Ç—Ä–æ–º–±–æ—ç–º–±–æ–ª–∏—á–µ—Å–∫–∏–µ –æ—Å–ª–æ–∂–Ω–µ–Ω–∏—è?"
        ]
        
        cols = st.columns(2)
        for i, question in enumerate(example_questions):
            with cols[i % 2]:
                if st.button(question, key=f"example_{i}", use_container_width=True):
                    st.session_state.example_question = question
                    st.rerun()
    
    def main():
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –ó–∞–≥—Ä—É–∑–∫–∞ RAG —Å–∏—Å—Ç–µ–º—ã
        if 'rag_system' not in st.session_state:
            st.session_state.rag_system = load_rag_system()
        
        if st.session_state.rag_system is None:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å RAG —Å–∏—Å—Ç–µ–º—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        top_k = display_sidebar()
        display_example_questions()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤
        if 'example_question' in st.session_state:
            st.text_area("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", value=st.session_state.example_question, height=100)
            del st.session_state.example_question
        
        display_main_interface(st.session_state.rag_system, top_k)
        
        # –§—É—Ç–µ—Ä
        st.markdown("---")
        st.markdown("""
        <div style="text-align: center; color: #666; font-size: 0.9rem;">
            –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ | –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è | 
            <a href="https://github.com" target="_blank">GitHub</a>
        </div>
        """, unsafe_allow_html=True)
    
    return main


if __name__ == "__main__":
    app = create_web_app()
    app()
